#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Spanish Analyser

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞:
1. Web Scraper - –∑–∞–≥—Ä—É–∑–∫–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü —Å practicatest.com
2. Text Analyzer - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–æ–≤
"""

import os
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "web_scraper"))
sys.path.insert(0, str(Path(__file__).parent / "text_analyzer"))

def run_web_scraper():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞...")
    
    try:
        from download_tests import download_available_tests
        success = download_available_tests()
        
        if success:
            print("‚úÖ –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")

def run_text_analyzer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("üìä –ó–∞–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        from driving_tests_analyzer import DrivingTestsAnalyzer
        
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        analyzer = DrivingTestsAnalyzer(
            downloads_path="../data/downloads",
            results_path="../data/results"
        )
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Anki
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anki...")
            if not analyzer.connect_to_anki():
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ Anki...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
            print("\nüìÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ HTML —Ñ–∞–π–ª–æ–≤...")
            analysis_result = analyzer.analyze_html_files()
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis_result['files_processed']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {analysis_result['words_found']}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {analysis_result['unique_words']}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            export_file = analyzer.export_results()
            
            if export_file:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {export_file}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = analyzer.get_analysis_summary()
            print(f"\nüìã –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['analysis_time']}")
            print(f"   –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤: {summary['known_words']}")
            print(f"   –ù–æ–≤—ã—Ö —Å–ª–æ–≤: {summary['new_words']}")
            
        finally:
            analyzer.close()
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Spanish Analyser - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main_tools.py --scraper          # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä–∞
  python main_tools.py --analyzer         # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  python main_tools.py --all              # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  python main_tools.py                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        """
    )
    
    parser.add_argument(
        '--scraper', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--analyzer', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä'
    )
    
    parser.add_argument(
        '--all', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
    )
    
    args = parser.parse_args()
    
    print("üöó Spanish Analyser - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    print("=" * 50)
    
    if args.all:
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        run_web_scraper()
        print("\n" + "=" * 50)
        run_text_analyzer()
        
    elif args.scraper:
        run_web_scraper()
        
    elif args.analyzer:
        run_text_analyzer()
        
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while True:
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            print("1. üåê Web Scraper - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å practicatest.com")
            print("2. üìä Text Analyzer - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤")
            print("3. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (1-3): ").strip()
            
            if choice == '1':
                run_web_scraper()
            elif choice == '2':
                run_text_analyzer()
            elif choice == '3':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
