#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è:
1. –ó–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –±–∏–ª–µ—Ç–∞–º–∏
2. –ê–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from web_scraper import DrivingTestsDownloader
from text_analyzer import DrivingTestsAnalyzer


def download_tests(start_page: int, end_page: int, delay: bool = True):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–ª–µ—Ç—ã –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é"""
    print(f"üöó –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤ —Å {start_page} –ø–æ {end_page}")
    
    downloader = DrivingTestsDownloader(
        save_path="../../data/downloads",
        delay_range=(3, 7)
    )
    
    try:
        downloaded_files = downloader.download_multiple_tests(start_page, end_page, delay)
        
        stats = downloader.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate_percent']}%")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['elapsed_time']}")
        
        if downloaded_files:
            print(f"\nüìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")
        
        return len(downloaded_files) > 0
        
    finally:
        downloader.close()


def analyze_tests():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã"""
    print("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")
    
    analyzer = DrivingTestsAnalyzer(
        downloads_path="../data/downloads",
        results_path="../data/results"
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
        analysis_result = analyzer.analyze_html_files()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis_result['files_processed']}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {analysis_result['words_found']}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {analysis_result['unique_words']}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        export_file = analyzer.export_results()
        
        if export_file:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {export_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = analyzer.get_analysis_summary()
        print(f"\nüìã –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['analysis_time']}")
        print(f"   –ò–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤: {summary['known_words']}")
        print(f"   –ù–æ–≤—ã—Ö —Å–ª–æ–≤: {summary['new_words']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False


def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üìã –°—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
    downloads_path = Path("../data/downloads")
    if downloads_path.exists():
        html_files = list(downloads_path.glob("*.html"))
        print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {len(html_files)} HTML —Ñ–∞–π–ª–æ–≤")
        if html_files:
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for file in sorted(html_files, key=lambda x: x.stat().st_mtime, reverse=True)[:5]:
                print(f"     - {file.name}")
    else:
        print("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_path = Path("../data/results")
    if results_path.exists():
        excel_files = list(results_path.glob("*.xlsx"))
        print(f"\nüìä –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤")
        if excel_files:
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for file in sorted(excel_files, key=lambda x: x.stat().st_mtime, reverse=True)[:5]:
                print(f"     - {file.name}")
    else:
        print("\nüìä –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é")
    parser.add_argument("action", choices=["download", "analyze", "status", "full"], 
                       help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--start", type=int, default=1, 
                       help="–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
    parser.add_argument("--end", type=int, default=10, 
                       help="–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)")
    parser.add_argument("--no-delay", action="store_true", 
                       help="–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    
    args = parser.parse_args()
    
    print("üöó –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø–æ –≤–æ–∂–¥–µ–Ω–∏—é\n")
    
    try:
        if args.action == "download":
            success = download_tests(args.start, args.end, not args.no_delay)
            if success:
                print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
        elif args.action == "analyze":
            success = analyze_tests()
            if success:
                print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                
        elif args.action == "status":
            show_status()
            
        elif args.action == "full":
            print("üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∑–∫–∞ + –∞–Ω–∞–ª–∏–∑")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–ª–µ—Ç—ã
            if download_tests(args.start, args.end, not args.no_delay):
                print("\n" + "="*50)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
                if analyze_tests():
                    print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("\n‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            else:
                print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
