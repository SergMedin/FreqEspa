#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ practicatest.com

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
2. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏
3. –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ "Test del Permiso B"
4. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "VER LOS TEST"
5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–µ—Å—Ç–∞–º–∏
"""

import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

from practicatest_auth import PracticaTestAuth
from practicatest_parser import PracticaTestParser


def test_parser_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ practicatest.com")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth = PracticaTestAuth()
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        print("\nüîê –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        if not auth.login():
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
        print("\nüîç –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...")
        parser = PracticaTestParser(auth.session)
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏
        print("\nüåê –®–∞–≥ 3: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏...")
        if not parser.navigate_to_tests_page():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏")
            return False
        
        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏ —É—Å–ø–µ—à–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("\nüìä –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        debug_info = parser.debug_page_structure()
        
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
        print(f"  URL: {debug_info.get('url', '–ù–ï –ò–ó–í–ï–°–¢–ï–ù')}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {debug_info.get('title', '–ù–ï –ù–ê–ô–î–ï–ù')}")
        print(f"  –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {debug_info.get('page_size', 0)} –±–∞–π—Ç")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {debug_info.get('tables_count', 0)}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º: {debug_info.get('forms_count', 0)}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {debug_info.get('modals_count', 0)}")
        
        print("\nüìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
        for i, header in enumerate(debug_info.get('headers', [])[:10], 1):
            print(f"  {i}. {header}")
        
        print("\nüîò –ö–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
        for i, button in enumerate(debug_info.get('buttons', [])[:10], 1):
            print(f"  {i}. {button}")
        
        print("\nüîó –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
        for i, link in enumerate(debug_info.get('links', [])[:10], 1):
            print(f"  {i}. {link}")
        
        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "Test del Permiso B"
        print("\nüéØ –®–∞–≥ 5: –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ 'Test del Permiso B'...")
        test_section = parser.find_test_section()
        
        if test_section:
            print("‚úÖ –†–∞–∑–¥–µ–ª 'Test del Permiso B' –Ω–∞–π–¥–µ–Ω")
            print(f"  HTML: {str(test_section)[:200]}...")
        else:
            print("‚ö†Ô∏è –†–∞–∑–¥–µ–ª 'Test del Permiso B' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "VER LOS TEST"
        print("\nüîò –®–∞–≥ 6: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ 'VER LOS TEST'...")
        ver_button = parser.find_ver_los_test_button()
        
        if ver_button:
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'VER LOS TEST' –Ω–∞–π–¥–µ–Ω–∞")
            print(f"  –¢–∏–ø: {ver_button.name}")
            print(f"  HTML: {str(ver_button)[:200]}...")
        else:
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'VER LOS TEST' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ—Å—Ç–∞–º–∏
        print("\nüìã –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–µ—Å—Ç–∞–º–∏...")
        tests_data = parser.parse_tests_data()
        
        if tests_data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tests_data)} —Ç–µ—Å—Ç–æ–≤")
            print("\nüìä –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤:")
            for i, test in enumerate(tests_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  –¢–µ—Å—Ç {i}:")
                for key, value in test.items():
                    if key != 'raw_html':
                        print(f"    {key}: {value}")
                    else:
                        print(f"    {key}: {str(value)[:100]}...")
        else:
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("\nüìÑ –®–∞–≥ 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        page_content = parser.get_page_content()
        
        if page_content:
            print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–æ ({len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"  –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {page_content[:500]}...")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        auth.close()
        print("\nüîí –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ practicatest.com")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    project_root = Path(__file__).parent.parent.parent
    env_file = project_root / ".env"
    
    if not env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   PRACTICATEST_EMAIL=–≤–∞—à_email@example.com")
        print("   PRACTICATEST_PASSWORD=–≤–∞—à_–ø–∞—Ä–æ–ª—å")
        return
    
    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_file.absolute()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    success = test_parser_functionality()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    if success:
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    print("\nüîö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
